events {
    worker_connections  8000;  ## Default: 1024
    multi_accept on;
}
http {
  include    /etc/nginx/mime.types;
  # include    /etc/nginx/proxy.conf;
  # include    /etc/nginx/fastcgi.conf;
  index    index.html index.htm;

  ssl_session_cache shared:SSL:5m;
  ssl_session_timeout 1h;

  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log   /etc/nginx/logs/access.log  main;
  sendfile     on;
  tcp_nopush   on;
  server_names_hash_bucket_size 128;

  error_log /etc/nginx/logs/error.log warn;

  proxy_cache_path /etc/nginx/cache keys_zone=one:500m max_size=1000m;

  # ============================================================================
  # Frontend
  server {
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;

    server_name demo.eksicode.org;

    location / {
      proxy_pass http://frontend:3000;
      client_max_body_size 200M;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
      proxy_buffers 16 16k;
      proxy_buffer_size 32k;
      proxy_read_timeout 300;
      proxy_connect_timeout 300;
      proxy_send_timeout 300;
    }

    listen 80;
    listen [::]:80;
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;


    ssl_certificate /etc/nginx/eksicode.crt;
    ssl_certificate_key /etc/nginx/eksicode.key;
  }

  # ============================================================================
  # Backend
  server {
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;

    server_name api-demo.eksicode.org;

    location / {
      proxy_pass http://backend:9000;
      client_max_body_size 200M;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
    }

    listen 80;
    listen [::]:80;
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;


    ssl_certificate /etc/nginx/eksicode.crt;
    ssl_certificate_key /etc/nginx/eksicode.key;
  }
  # Don't edit below this line
}