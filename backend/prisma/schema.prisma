generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String
  firstName      String?
  lastName       String?
  username       String         @unique
  profilePicture String?
  birthday       DateTime?
  telegramId     Int?
  phoneNumber    String?
  linkedin       String?
  github         String?
  website        String?
  twitter        String?
  instagram      String?
  facebook       String?
  verified       Boolean        @default(false)
  emailVerified  Boolean        @default(false)
  roles          UserRole[]
  posts          Post[]
  comments       Comment[]
  postLikes      PostLike[]
  notifications  Notification[]
  jobs           Job[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("users")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("permissions")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Post {
  id          Int            @id @default(autoincrement())
  title       String
  content     String
  headerImage String?
  authorId    Int
  author      User           @relation(fields: [authorId], references: [id])
  postLikes   PostLike[]
  comments    Comment[]
  categories  PostCategory[]
  tags        HashTag[]
  status      PostStatusEnum @default(draft)
  slug        String         @unique
  approved    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model PostCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("post_categories")
}

model HashTag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@map("hash_tags")
}

model PostLike {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("post_likes")
}

model Page {
  id         Int            @id @default(autoincrement())
  title      String
  content    String
  headerImg  String?
  slug       String         @unique
  categories PageCategory[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("pages")
}

model PageCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  pages     Page[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("page_categories")
}

model TelegramGroup {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  icon        String?
  members     Int      @default(0)
  link        String
  channelId   String?
  listOrder   Int?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("telegram_groups")
}

model Menu {
  id         Int            @id @default(autoincrement())
  name       String
  link       String
  subMenu    Int            @default(0)
  icon       String?
  categories MenuCategory[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("menus")
}

model MenuCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menus     Menu?    @relation(fields: [id], references: [id])

  @@map("menu_categories")
}

model Notification {
  id        Int                  @id @default(autoincrement())
  title     String
  content   String
  type      NotificationTypeEnum
  userId    Int
  user      User                 @relation(fields: [userId], references: [id])
  read      Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("notifications")
}

model Job {
  id             Int                   @id @default(autoincrement())
  title          String
  description    String
  location       String
  EmploymentType JobEmploymentTypeEnum
  Department     String
  salary         String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  company        User?                 @relation(fields: [usersId], references: [id])
  usersId        Int?

  @@map("jobs")
}

model Source {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  headers     String?
  url         String
  tgChannel   String?
  tgUser      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sources")
}

// Enums List

enum JobEmploymentTypeEnum {
  fullTime
  partTime
  contract
  temporary
  internship
}

enum NotificationTypeEnum {
  yorum
  gönderi
  hata
  yönetim
  mesaj
}

enum MediaTypeEnum {
  image
  video
  audio
  document
}

enum PostStatusEnum {
  draft
  published
  archived
}
